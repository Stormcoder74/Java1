public static boolean checkWin(char symb) {
	boolean diag1 = true;
	boolean diag2 = true;
	for (int i = 0; i < SIZE; i++) {
		if (map[i][0] == symb && map[i][1] == symb && map[i][2] == symb) return true;
		if (map[0][i] == symb && map[1][i] == symb && map[2][i] == symb) return true;
		diag1 = diag1 && map[i][i] == symb;
		diag2 = diag2 && map[SIZE - 1 - i][i] == symb;
	return diag1 || diag2;
}

public static boolean checkWin(char symb) {
	boolean diag1 = true;
	boolean diag2 = true;
	for (int i = 0; i < DOTS_TO_WIN; i++) {
		boolean row = true;
		boolean column = true;
		for (int j = 0; j < DOTS_TO_WIN; j++) {
			row = row && map[j][i] == symb;
			column = column && map[i][j] == symb;
		}
		if(row || column) return true;
		diag1 = diag1 && map[i][i] == symb;
		diag2 = diag2 && map[SIZE - 1 - i][i] == symb;
	}
	return diag1 || diag2;
}

public static boolean checkWin(char symb) {
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			if (map[i][j] == symb) {
				boolean row = true;
				boolean column = true;
				boolean diag1 = true;
				boolean diag2 = true;
				for (int k = 1; k < DOTS_TO_WIN && (row || column || diag1 || diag2); k++) {
					row = (i + k) < SIZE && row && map[i + k][j] == symb;
					column = (j + k) < SIZE && column && map[i][j + k] == symb;
					diag1 = (i + k) < SIZE && (j + k) < SIZE && diag1 && map[i + k][j + k] == symb;
					diag2 = (i - k) >= 0 && (j + k) < SIZE && diag2 && map[i - k][j + k] == symb;
				}
				if (row || column || diag1 || diag2) return true;
			}
		}
	}
	return false;
}